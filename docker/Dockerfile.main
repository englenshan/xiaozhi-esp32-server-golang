# 构建阶段
FROM golang:1.23 AS builder

# 设置非交互式安装环境变量
ENV DEBIAN_FRONTEND=noninteractive

# 获取构建参数
ARG TARGETARCH

# 安装构建依赖
RUN apt-get update && apt-get install -y libopus-dev libopusfile-dev pkg-config wget

# 根据架构下载并安装ONNX Runtime
RUN ONNX_ARCH=$(case ${TARGETARCH} in \
        amd64) echo "x64" ;; \
        arm64) echo "aarch64" ;; \
        *) echo "x64" ;; \
    esac) && \
    ONNX_VERSION="1.21.0" && \
    ONNX_URL="https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VERSION}/onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}.tgz" && \
    echo "Downloading ONNX Runtime for ${ONNX_ARCH} architecture from ${ONNX_URL}" && \
    wget -O /tmp/onnxruntime.tgz "${ONNX_URL}" && \
    cd /tmp && \
    tar -xzf onnxruntime.tgz && \
    ONNX_DIR=$(ls -d onnxruntime-linux-*/) && \
    mkdir -p /usr/local/include/onnxruntime && \
    cp -r ${ONNX_DIR}include/* /usr/local/include/onnxruntime/ && \
    cp -r ${ONNX_DIR}lib/* /usr/local/lib/ && \
    rm -rf /tmp/onnxruntime* && \
    ldconfig

# 设置Go环境变量
ENV ONNXRUNTIME_DIR=/usr/local
ENV CGO_CFLAGS="-I${ONNXRUNTIME_DIR}/include/onnxruntime" 
ENV CGO_LDFLAGS="-L${ONNXRUNTIME_DIR}/lib -lonnxruntime"
ENV GOPROXY=https://goproxy.cn,direct
ENV CGO_ENABLED=1

# 创建工作目录并复制源代码
WORKDIR /app
COPY . .

# 构建主程序
RUN go build -o /app/xiaozhi_server ./cmd/server/

# 运行阶段
FROM ubuntu:22.04

# 设置非交互式安装环境变量
ENV DEBIAN_FRONTEND=noninteractive

# 安装运行时依赖（最小化安装）
RUN apt-get update && apt-get install -y --no-install-recommends \
    libopus0 \
    libopusfile0 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# 获取构建参数
ARG TARGETARCH

# 安装wget用于下载
RUN apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/*

# 根据架构下载并安装ONNX Runtime运行时
RUN ONNX_ARCH=$(case ${TARGETARCH} in \
        amd64) echo "x64" ;; \
        arm64) echo "aarch64" ;; \
        *) echo "x64" ;; \
    esac) && \
    ONNX_VERSION="1.21.0" && \
    ONNX_URL="https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VERSION}/onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}.tgz" && \
    echo "Downloading ONNX Runtime for ${ONNX_ARCH} architecture from ${ONNX_URL}" && \
    wget -O /tmp/onnxruntime.tgz "${ONNX_URL}" && \
    cd /tmp && \
    tar -xzf onnxruntime.tgz && \
    ONNX_DIR=$(ls -d onnxruntime-linux-*/) && \
    mkdir -p /usr/local/include/onnxruntime && \
    cp -r ${ONNX_DIR}include/* /usr/local/include/onnxruntime/ && \
    cp -r ${ONNX_DIR}lib/* /usr/local/lib/ && \
    rm -rf /tmp/onnxruntime* && \
    ldconfig

# 设置ONNX Runtime环境变量
ENV ONNXRUNTIME_DIR=/usr/local
ENV CGO_CFLAGS="-I${ONNXRUNTIME_DIR}/include/onnxruntime" 
ENV CGO_LDFLAGS="-L${ONNXRUNTIME_DIR}/lib -lonnxruntime"

# 设置工作目录
WORKDIR /workspace

# 从构建阶段复制编译后的二进制文件
COPY --from=builder /app/xiaozhi_server /workspace/bin/xiaozhi_server

# 创建必要的目录
RUN mkdir -p /workspace/logs /workspace/config

# 暴露端口: http/websocket:8989, udp:8990, mqtt: 1883,2883,8883
EXPOSE 8989 8990 1883 2883 8883

# 启动命令
CMD ["bin/xiaozhi_server", "-c", "config/config.yaml"]
